function Edge(nodeStart,nodeEnd,id,weight){var privates={};privates.id=id;privates.nodeStart=nodeStart;privates.nodeEnd=nodeEnd;weight!=null?privates.weight=weight:privates.weight=1;this.getId=function(){return privates.id};this.getNodeStart=function(){return privates.nodeStart};this.getNodeEnd=function(){return privates.nodeEnd};this.getWeight=function(){return privates.weight};this.setWeight=function(weight){privates.weight=weight}};function Node(object,id){var privates={};privates.id=id;privates.content=object;this.getId=function(){return privates.id};this.getContent=function(){return privates.content}};function equal(str1,str2){str1=str1.toString();str2=str2.toString();return str1.localeCompare(str2)==0?!0:!1};module.exports=function Graph(){var privates={};privates.nodes=new Array();privates.edges=new Array();this.isNode=function(id){var result=!1;for(var n in privates.nodes){if(equal(privates.nodes[n].getId(),id))
result=!0}
return result};this.isEdge=function(id){var result=!1;for(var e in privates.edges){if(equal(privates.edges[e].getId(),id))
result=!0}
return result};this.addNode=function(object,id){if(object!=null&&id!=null){if(!this.isNode(id)){var node=new Node(object,id);privates.nodes.push(node)}
else console.error("Error : The node's id is already exists")}
else console.error("Error : The node is not correctly defined")};this.addEdge=function(idNodeStart,idNodeEnd,id,weight){if(idNodeStart!=null&&idNodeEnd!=null&&id!=null){if(this.isNode(idNodeStart)&&this.isNode(idNodeEnd)){if(!this.isEdge(id)){var edge=new Edge(this.getNode(idNodeStart),this.getNode(idNodeEnd),id,weight);privates.edges.push(edge)}
else console.error("Error : The edge's id is already exists")}
else console.error("Error : The edge is not create because one of nodes doesn't exist.")}
else console.error("Error : The edge is not correctly defined.")};this.removeNode=function(id){var arrayIndex=new Array();for(var n in privates.nodes){if(equal(privates.nodes[n].getId(),id)){privates.nodes.splice(n,1)}}
for(var e in privates.edges){if(equal(privates.edges[e].getNodeStart().getId(),id)||equal(privates.edges[e].getNodeEnd().getId(),id)){arrayIndex.push(e)}}
for(var i in arrayIndex){arrayIndex[i]-=i}
for(var i in arrayIndex){privates.edges.splice(arrayIndex[i],1)}
arrayIndex=[]};this.removeEdge=function(id){for(var e in privates.edges){if(equal(privates.edges[e].getId(),id)){privates.edges.splice(e,1)}}};this.getPredecessors=function(id){var predecessors=new Array();for(var e in privates.edges){if(equal(privates.edges[e].getNodeEnd().getId(),id)){predecessors.push(privates.edges[e].getNodeStart())}}
return predecessors};this.getSuccessors=function(id){var successors=new Array();for(var e in privates.edges){if(equal(privates.edges[e].getNodeStart().getId(),id)){successors.push(privates.edges[e].getNodeEnd())}}
return successors};this.getNode=function(id){var result=new Node();for(var n in privates.nodes){if(equal(privates.nodes[n].getId(),id)){result=privates.nodes[n]}}
return result};this.getNodes=function(){return privates.nodes};this.getEdge=function(id){var result=new Edge();for(var e in privates.edges){if(equal(privates.edges[e].getId(),id)){result=privates.edges[e]}}
return result};this.getEdges=function(){return privates.edges}}
